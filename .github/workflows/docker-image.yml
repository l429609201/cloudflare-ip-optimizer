# 工作流名称
name: Publish to Docker Hub

# 触发条件：当有代码推送到 main 分支时触发此工作流
# 或者当一个以 'v' 开头的标签被推送时
on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*.*.*'

jobs:
  # 定义一个名为 build-and-push 的作业
  build-and-push:
    # 在最新的 Ubuntu 虚拟机上运行
    runs-on: ubuntu-latest
    steps:
      # 步骤1: 检出代码
      # 拉取你的仓库代码到虚拟机中
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤2: 设置 Docker Buildx
      # Buildx 是一个 Docker CLI 插件，用于启用更高级的构建功能
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤3: 登录到 Docker Hub
      # 使用我们之前在 GitHub Secrets 中设置的凭据
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤4: 提取 Docker 元数据 (标签和标记)
      # 这个 action 会根据 Git 事件 (如推送、标签) 自动生成合适的 Docker 标签
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/cloudflare-optimizer

      # 步骤5: 构建并推送 Docker 镜像
      # 增加 platforms 参数以支持多架构构建 (例如 amd64 和 arm64)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64 # 构建支持 x86 和 ARM 的镜像
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
